#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('api:server');
const http = require('http');
const _ = require('lodash');
const socketIo = require('socket.io');
const Redis = require('ioredis');

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

const server = http.createServer(app);


const io = socketIo(server, {
  cors: {
    origin: '*',
  }
});
const redis = new Redis();
const sockets = [];
const events = [];

io.on('connection', (socket) => {
  sockets.push(socket)

  socket.on('disconnect', () => {
    sockets.splice(sockets.indexOf(socket), 1)
  });
});

const emitEvents = _.throttle(() => {
  if (events.length === 0) {
    return;
  }

  sockets.forEach(socket => {
    socket.emit('events', events)
  })

  events.splice(0, events.length);
}, 5000);

redis.subscribe('events', (error, count) => {
  if (error) {
    console.log('ERROR - redis.subcribe', error);
    return;
  }
})

redis.on('message', (channel, message) => {
  if (channel !== 'events') {
    console.log('ERROR - redis.on', channel)
    return;
  }

  emitEvents();
  events.unshift(JSON.parse(message))
})

redis.on('error', (error) => {
  if (error) {
    console.log('ERROR - redis.on', error);
    return;
  }

  sockets.forEach(socket => {
    socket.emit('error', error)
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
